(use-trait sip-010-trait 'ST2SHP0RSX5ST9HTKJM4JF6SGQ686P4GJGF2XHHTX.sip-010-trait-ft-standard.sip-010-trait)

;; Constants
(define-constant token-supply u21000000000000) ;; 21 million with 6 decimals
(define-constant allow-token 'ST37918Q7NBZ52AMV133VTY5C864KVK0S2HZ3CGA4.frightened-tan-gayal)
(define-constant VIRTUAL_STX_VALUE u4200000000)
(define-constant STX_CITY_SWAP_FEE_WALLET 'ST1T0VY3DNXRVP6HBM75DFWW0199CR0X15QYADAW0)
(define-constant BONDING-DEX-ADDRESS (as-contract tx-sender))

;; Errors
(define-constant ERR-UNAUTHORIZED (err u401))
(define-constant ERR-UNAUTHORIZED-TOKEN (err u402))
(define-constant ERR-NOT-ENOUGH-STX-BALANCE (err u1003))
(define-constant ERR-NOT-ENOUGH-TOKEN-BALANCE (err u1004))
(define-constant BUY-INFO-ERROR (err u2001))
(define-constant SELL-INFO-ERROR (err u2002))

;; Data Vars
(define-data-var virtual-stx-amount uint u0)
(define-data-var token-balance uint u0)
(define-data-var stx-balance uint u0)

;; BUY
(define-public (buy (token-trait <sip-010-trait>) (stx-amount uint))
  (begin
    (asserts! (> stx-amount u0) ERR-NOT-ENOUGH-STX-BALANCE)
    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN)

    (let (
      (buy-info (unwrap! (get-buyable-tokens stx-amount) BUY-INFO-ERROR))
      (stx-fee (get fee buy-info))
      (stx-after-fee (get stx-buy buy-info))
      (tokens-out (get buyable-token buy-info))
      (new-token-balance (get new-token-balance buy-info))
      (recipient tx-sender)
      (new-stx-balance (+ (var-get stx-balance) stx-after-fee))
    )
      (try! (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET))
      (try! (stx-transfer? stx-after-fee tx-sender (as-contract tx-sender)))
      (try! (as-contract (contract-call? token-trait transfer tokens-out tx-sender recipient none)))

      (var-set stx-balance new-stx-balance)
      (var-set token-balance new-token-balance)

      (ok tokens-out)
    )
  )
)

;; SELL
(define-public (sell (token-trait <sip-010-trait>) (tokens-in uint))
  (begin
    (asserts! (> tokens-in u0) ERR-NOT-ENOUGH-TOKEN-BALANCE)
    (asserts! (is-eq allow-token (contract-of token-trait)) ERR-UNAUTHORIZED-TOKEN)

    (let (
      (sell-info (unwrap! (get-sellable-stx tokens-in) SELL-INFO-ERROR))
      (stx-fee (get fee sell-info))
      (stx-receive (get stx-receive sell-info))
      (current-stx-balance (get current-stx-balance sell-info))
      (stx-out (get stx-out sell-info))
      (new-token-balance (get new-token-balance sell-info))
      (recipient tx-sender)
    )
      (try! (contract-call? token-trait transfer tokens-in tx-sender BONDING-DEX-ADDRESS none))
      (try! (as-contract (stx-transfer? stx-receive tx-sender recipient)))
      (try! (as-contract (stx-transfer? stx-fee tx-sender STX_CITY_SWAP_FEE_WALLET)))

      (var-set stx-balance (- (var-get stx-balance) stx-out))
      (var-set token-balance new-token-balance)

      (ok stx-receive)
    )
  )
)

;; READ: Buy Estimate
(define-read-only (get-buyable-tokens (stx-amount uint)) 
  (let (
    (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))
    (current-token-balance (var-get token-balance))
    (stx-fee (/ (* stx-amount u2) u100))
    (stx-after-fee (- stx-amount stx-fee))
    (k (* current-token-balance current-stx-balance))
    (new-stx-balance (+ current-stx-balance stx-after-fee))
    (new-token-balance (/ k new-stx-balance))
    (tokens-out (- current-token-balance new-token-balance))
  )
    (ok {
      fee: stx-fee,
      buyable-token: tokens-out,
      stx-buy: stx-after-fee,
      new-token-balance: new-token-balance,
      stx-balance: (var-get stx-balance),
      token-balance: (var-get token-balance)
    })
  )
)

;; READ: Sell Estimate
(define-read-only (get-sellable-stx (token-amount uint)) 
  (let (
    (tokens-in token-amount)
    (current-stx-balance (+ (var-get stx-balance) (var-get virtual-stx-amount)))
    (current-token-balance (var-get token-balance))
    (k (* current-token-balance current-stx-balance))
    (new-token-balance (+ current-token-balance tokens-in))
    (new-stx-balance (/ k new-token-balance))
    (stx-out (- (- current-stx-balance new-stx-balance) u1))
    (stx-fee (/ (* stx-out u2) u100))
    (stx-receive (- stx-out stx-fee))
  )
    (ok {
      fee: stx-fee,
      current-stx-balance: current-stx-balance,
      receivable-stx: stx-receive,
      stx-receive: stx-receive,
      new-token-balance: new-token-balance,
      stx-out: stx-out,
      stx-balance: (var-get stx-balance),
      token-balance: (var-get token-balance)
    })
  )
)

;; INIT
(begin
  (var-set virtual-stx-amount VIRTUAL_STX_VALUE)
  (var-set token-balance token-supply)
  (var-set stx-balance u124666667) ;; initial value for testing
  (ok true)
)